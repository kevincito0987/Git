Hello.
For now let's talk about your resume,
but first we will leave it intact.
We will only focus on asking you the indicated questions.
Some commands that can help when collaborating with very large github projects:
git log --oneline - Displays the confirmation ID and confirmation title.
git log --decorate- Shows where the head point is located in the log.
git log --stat - Explains the number of lines that were briefly changed.
git log -p- Explains the number of lines that were changed and shows that it was changed in the content.
git shortlog - Indicates what confirmations a user has made, showing the user and the title of their confirmations.
git log --graph --oneline --decorate and git log --pretty=format:"%cn made a commit %h on the day %cd" - Displays custom commit messages.
git log -3 - We limit the number of confirmations.
git log --after="2018-1-2" ,
git log --after="today" and
git log --after="2018-1-2" --before="today" - You agree to locate by dates.
git log --author="Name Author" - Confirmations made by the author that exactly meet the name.
git log --grep="INVIE" - Look for confirmations that comply with what is written in quotation marks.
git log --grep="INVIE" -i- Look for supported commits regardless of case.
git log – index.html- Search for commits in a specific file.
git log -S "Por contenido"- Busque confirmaciones con el contenido dentro del archivo.
git log > log.txt - guardar registros en un archivo txt.
If I want to start a repo and then upload it to my Gitlab or Github I do the following:
 1. I look for the folder in which the repository will be and when I find it I will start the repository with the command: git int.
    Then I add the folder and files with the command: git add file or folder.
    So they will be in stagying and to add them to the local repository I will use the command: git commit -m "message".
    Then if I make new changes to the files I can add them to staying and the local repository with the command: git commit -am "message".
    By the time I have it all, I first use git add, then I use git commit and to take them to the group repository I use git push. But to bring me a version of the group repository because anyone made a change, I used git fetch.
    But there is a command that joins me to the previous two and it is git pull.
    If I wanted to make a branch to do experiments without changing the original version we used the command git branch n.rama.
    And to switch from the master branch to the other experiment branch we use the git checkout n.rama command.
    Ssh keys are used which for hackers cannot access our publications or secret files.
    To create ssh keys we use the command: ssh-keygen -t rsa -b 4096 -C"kevinangaritacaamano@gmail.com"
    To check if the key server is running my ssh keys we use the command: $ eval $(ssh-agent -s), and to add this key on our laptop we use the command: ssh-add ~/.ssh/id_rsa.   
    To refer to the git installation house of my computer we use the command: ~.
    To know what tags we have we use the command: $ git tag, and to know the reference of this tag we use: $ git show-ref --tags, and to send it we use: $ git push origin --tags. 
    To remove tags from your computer we use: git tag -d n.tag, and to remove this tag od gitlab or github we use: git push origin :refs/tags/n.tag.
 2.To create a new branch with the name that we want with the command: $ git remote add n.branch https://github.com/kevincito0987/Dom.git.
   To see what this repository has a direction where to do fetch and push with the command: $ git remote -v.
   To bring me the ultimate version of my repository in Github or Gitlab to my local repository we use the command: git pull n.branch master.
   Then to change the direction of the repository in my local to change it by SSH keys with the command: $ git remote set-url origin git@github.com:kevincito0987/Dom.git.
   If I want send the changes that i had made in my local repository following previous steps we use the command: git push n.branch master.
   To add the latest version to one where my group works but is versioning in my local repository, I use git clone url.
   The $git show-branch command tells me the history of the branches and to see that in more depth we use: $git show-branch --all.
   To add me to a project or repository that someone has created we use: git clone url.project.
   To merge branches of collaborators, we first bring all branches with the git pull origin n.branch command, then we do git status and do what needs to be done and then merge branches with the git merge n.branch command and then send changes to our repository in gitlab or github with the git push origin n.branch.
If I am not a collaborator or owner of the project or depositor I must do:
 1. To make a fork of the project, then clone it with the command: git clone url and to make changes what I want. But if the owner makes new changes to the repository and I am late with those changes I must use the command: git remote -v to know what are the branches to search and push the repository, then to add the repository we configure a new branch called upstream and then we use the command: git remote add upstread url. So we look for the sources of information with the command: git remote -v.
 2. We must bring the information with the command: git pull upstread master, then we make a commit to see if there is anything to add, then we send this data to our repository with the command: git push origin master.
3.I create a server and then clone the repository with the command: git clone url.
 How to make a remote fork from the Github console.
  When you make a fork, Github knows that the project fork was made, so the contributor can make a pull request from their own repository.
  When you work that exists in different remote repositories (usually due to a fork), it is very likely that it is what you want to be able to work with both repositories. For that, you can generate an additional remote control from the console.
  git remote add <nombre_del_remoto> <url_del_remoto> git remote upstream https://github.com/freddier/hyperblog.
  By creating an additional remote control, we can pull from the new source. In case of being allowed, we can do fetchand push.
  git pull <remoto> <rama> git pull upstream master.This pull brings us the changes of the remote control, so you will be up to date on the project. the workflow changes, from now on you will be working to pull from upstream and push to the source to move to pull request.
  git pull upstream master, git push master source.
To ignore some files we create a new file that started with .gitignore and everything in this file will be ignored by git.
The command: git stash, is used to save the ultimate version of a branch before to send it to a commit.
In the branch in wich was the previous version  if (de casualidad) by chance i have a change in a branch but if i want to go back before i made those changes i would use the comand: git stash and this command save the previous version in a (temporal) temporary place and to see that place i use the command: git stash list, and to add this changes to another branch i use the command or save chenges and follow to doing a new changes in a new branch: git stash branch n.branch, then i change to the branch master and excecute the command: git stash pop to add the new changes and follow with the process.
And to delete stashes i use the command: git stash drop.
To delete some files what i don't want to go to the repository i use the command: git clean, and i can choose in these:
 The command: git clean --dry-run, this command is used to simulate the files that i gonna to delete.
 The command: git clean -f, is used to delete files that i haven't saved.
 The command: git clean -df, is used to delete folders that i want delete and that it hasn't been saved.
The command: git cherry-pick commit.number, is used to bring me a commit made in other branch to the branch master or main.
If by chance i delete all unintentionally and i don't remember what i do; there is a command that help me to remember all changes what i do: git reflog; then i search the ultimate HEAD in wich all was fine, it is: git reset HEAD(in wich all was fine).
To elimite somethings i use the command:
 git reset --SOFT to keep everything what i have in staying in staying.
 git reset --HARD to eliminate all.
Then i comb both commands so: git reset --HARD HEAD.
If i forget someting but i do the commit without changes what i forget to do, i can do this:
 First i do changes in my code editor and i save it, then i add it in git with the command: git commit n.file, then i excecute the command: git commit --amend and this command add me the changes what i do to the ultimate commit that i do.
If i would want remember how many times i use something in my proyect i would use:
git grep color --> use the word color.
git grep la --> where i use the sword la.
git grep -n color–> in which lines i use the sword color
git grep -n platzi --> in what line i use the sword platzi.
git grep -c la -->how many times i use the sword la.
git grep -c paltzi --> how many times i use the sword platzi.
git grep -c “<p>”–> how many times i use the tag <p>.
git log-S “cabecera” --> how many times i use the sword cabecera in all commits:
 grep–> to the files.
 log --> to the commits.
If i want to see how many commands i excecute how who is which do commits or another changes with the follow commands:
 git shortlog -sn = show how many commits each team member has done.
 git shortlog -sn --all = show how many commits each team member has done even those had been eliminated.
 git shortlog -sn --all --no-merge =  show how many commits each team member has done removing eliminates without merges.
 git blame ARCHIVO = show who did each thing line by line.
 git COMANDO --help = show how the command works.
 git blame ARCHIVO -Llinea_inicial,linea_final= show who did every single thing line by line indicating him since what line look.
 git branch -r = all remote branches are displayed. 
 git branch -a = all branches are displayed both local and remote.
 I can to add this command in a alias so: git config --global alias stats="shortlog -sn".
